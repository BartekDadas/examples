// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'dot_navigation_bar_item_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class DotNavigationBarItemBuilder extends _DotNavigationBarItemBuilder {
  const DotNavigationBarItemBuilder({required super.args});

  static const kType = 'dot_navigation_bar_item';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static DotNavigationBarItemBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) =>
      DotNavigationBarItemBuilder(
        args: map,
      );
  @override
  DotNavigationBarItemBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = DotNavigationBarItemBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  DotNavigationBarItem buildItem({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(
      childBuilder: childBuilder,
      data: data,
    );

    return DotNavigationBarItem(
      icon: model.icon.build(
        childBuilder: childBuilder,
        context: context,
      ),
      selectedColor: model.selectedColor,
      unselectedColor: model.unselectedColor,
    );
  }
  
  @override
  Widget buildCustom({ChildWidgetBuilder? childBuilder, required BuildContext context, required JsonWidgetData data, Key? key}) {
    // TODO: implement buildCustom
    throw UnimplementedError();
  }
}

class JsonDotNavigationBarItem extends JsonWidgetData {
  JsonDotNavigationBarItem({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    required this.icon,
    this.selectedColor,
    this.unselectedColor,
  }) : super(
          jsonWidgetArgs: DotNavigationBarItemBuilderModel.fromDynamic(
            {
              'icon': icon,
              'selectedColor': selectedColor,
              'unselectedColor': unselectedColor,
              ...args,
            },
            args: args,
            registry: registry,
          ),
          jsonWidgetBuilder: () => DotNavigationBarItemBuilder(
            args: DotNavigationBarItemBuilderModel.fromDynamic(
              {
                'icon': icon,
                'selectedColor': selectedColor,
                'unselectedColor': unselectedColor,
                ...args,
              },
              args: args,
              registry: registry,
            ),
          ),
          jsonWidgetType: DotNavigationBarItemBuilder.kType,
        );

  /* AUTOGENERATED FROM [DotNavigationBarItem.icon]*/
  /// An icon to display.
  final JsonWidgetData icon;

  /* AUTOGENERATED FROM [DotNavigationBarItem.selectedColor]*/
  /// A primary color to use for this tab.
  final Color? selectedColor;

  /* AUTOGENERATED FROM [DotNavigationBarItem.unselectedColor]*/
  /// The color to display when this tab is not selected.
  final Color? unselectedColor;
}

class DotNavigationBarItemBuilderModel extends JsonWidgetBuilderModel {
  const DotNavigationBarItemBuilderModel(
    super.args, {
    required this.icon,
    this.selectedColor,
    this.unselectedColor,
  });

  /* AUTOGENERATED FROM [DotNavigationBarItem.icon]*/
  /// An icon to display.
  final JsonWidgetData icon;

  /* AUTOGENERATED FROM [DotNavigationBarItem.selectedColor]*/
  /// A primary color to use for this tab.
  final Color? selectedColor;

  /* AUTOGENERATED FROM [DotNavigationBarItem.unselectedColor]*/
  /// The color to display when this tab is not selected.
  final Color? unselectedColor;

  static DotNavigationBarItemBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(
      map,
      args: args,
      registry: registry,
    );

    if (result == null) {
      throw Exception(
        '[DotNavigationBarItemBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static DotNavigationBarItemBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    DotNavigationBarItemBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(
          map,
          normalize: true,
        );
      }

      if (map is DotNavigationBarItemBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = DotNavigationBarItemBuilderModel(
          args,
          icon: () {
            dynamic parsed = JsonWidgetData.fromDynamic(
              map['icon'],
              registry: registry,
            );

            if (parsed == null) {
              throw Exception(
                  'Null value encountered for required parameter: [icon].');
            }
            return parsed;
          }(),
          selectedColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['selectedColor'],
              validate: false,
            );

            return parsed;
          }(),
          unselectedColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['unselectedColor'],
              validate: false,
            );

            return parsed;
          }(),
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'icon': icon.toJson(),
      'selectedColor': ThemeEncoder.encodeColor(
        selectedColor,
      ),
      'unselectedColor': ThemeEncoder.encodeColor(
        unselectedColor,
      ),
      ...args,
    });
  }
}

class DotNavigationBarItemSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/gen_build/dot_navigation_bar_item.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'DotNavigationBarItem',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'icon': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
      'selectedColor': SchemaHelper.objectSchema(ColorSchema.id),
      'unselectedColor': SchemaHelper.objectSchema(ColorSchema.id),
    },
  };
}
