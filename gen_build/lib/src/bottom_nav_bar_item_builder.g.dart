// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'bottom_nav_bar_item_builder.dart';

// **************************************************************************
// Generator: JsonWidgetLibraryBuilder
// **************************************************************************

// ignore_for_file: deprecated_member_use

// ignore_for_file: prefer_const_constructors
// ignore_for_file: prefer_const_constructors_in_immutables
// ignore_for_file: prefer_final_locals
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unused_local_variable

class BottomNavigationBarItemBuilder extends _BottomNavigationBarItemBuilder {
  const BottomNavigationBarItemBuilder({required super.args});

  static const kType = 'bottom_navigation_bar_item';

  /// Constant that can be referenced for the builder's type.
  @override
  String get type => kType;

  /// Static function that is capable of decoding the widget from a dynamic JSON
  /// or YAML set of values.
  static BottomNavigationBarItemBuilder fromDynamic(
    dynamic map, {
    JsonWidgetRegistry? registry,
  }) =>
      BottomNavigationBarItemBuilder(
        args: map,
      );
  @override
  BottomNavigationBarItemBuilderModel createModel({
    ChildWidgetBuilder? childBuilder,
    required JsonWidgetData data,
  }) {
    final model = BottomNavigationBarItemBuilderModel.fromDynamic(
      args,
      registry: data.jsonWidgetRegistry,
    );

    return model;
  }

  @override
  BottomNavigationBarItem buildItem({
    ChildWidgetBuilder? childBuilder,
    required BuildContext context,
    required JsonWidgetData data,
    Key? key,
  }) {
    final model = createModel(
      childBuilder: childBuilder,
      data: data,
    );

    return BottomNavigationBarItem(
      activeIcon: model.activeIcon?.build(
        childBuilder: childBuilder,
        context: context,
      ),
      backgroundColor: model.backgroundColor,
      icon: model.icon.build(
        childBuilder: childBuilder,
        context: context,
      ),
      label: model.label,
      tooltip: model.tooltip,
    );
  }
  
  @override
  Widget buildCustom({ChildWidgetBuilder? childBuilder, required BuildContext context, required JsonWidgetData data, Key? key}) {
    // TODO: implement buildCustom
    throw UnimplementedError();
  }
}

class JsonBottomNavigationBarItem extends JsonWidgetData {
  JsonBottomNavigationBarItem({
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
    this.activeIcon,
    this.backgroundColor,
    required this.icon,
    this.label,
    this.tooltip,
  }) : super(
          jsonWidgetArgs: BottomNavigationBarItemBuilderModel.fromDynamic(
            {
              'activeIcon': activeIcon,
              'backgroundColor': backgroundColor,
              'icon': icon,
              'label': label,
              'tooltip': tooltip,
              ...args,
            },
            args: args,
            registry: registry,
          ),
          jsonWidgetBuilder: () => BottomNavigationBarItemBuilder(
            args: BottomNavigationBarItemBuilderModel.fromDynamic(
              {
                'activeIcon': activeIcon,
                'backgroundColor': backgroundColor,
                'icon': icon,
                'label': label,
                'tooltip': tooltip,
                ...args,
              },
              args: args,
              registry: registry,
            ),
          ),
          jsonWidgetType: BottomNavigationBarItemBuilder.kType,
        );

  /* AUTOGENERATED FROM [BottomNavigationBarItem.activeIcon]*/
  /// An alternative icon displayed when this bottom navigation item is
  /// selected.
  ///
  /// If this icon is not provided, the bottom navigation bar will display
  /// [icon] in either state.
  ///
  /// See also:
  ///
  ///  * [BottomNavigationBarItem.icon], for a description of how to pair icons.
  final JsonWidgetData? activeIcon;

  /* AUTOGENERATED FROM [BottomNavigationBarItem.backgroundColor]*/
  /// The color of the background radial animation for material [BottomNavigationBar].
  ///
  /// If the navigation bar's type is [BottomNavigationBarType.shifting], then
  /// the entire bar is flooded with the [backgroundColor] when this item is
  /// tapped. This will override [BottomNavigationBar.backgroundColor].
  ///
  /// Not used for [CupertinoTabBar]. Control the invariant bar color directly
  /// via [CupertinoTabBar.backgroundColor].
  ///
  /// See also:
  ///
  ///  * [Icon.color] and [ImageIcon.color] to control the foreground color of
  ///    the icons themselves.
  final Color? backgroundColor;

  /* AUTOGENERATED FROM [BottomNavigationBarItem.icon]*/
  /// The icon of the item.
  ///
  /// Typically the icon is an [Icon] or an [ImageIcon] widget. If another type
  /// of widget is provided then it should configure itself to match the current
  /// [IconTheme] size and color.
  ///
  /// If [activeIcon] is provided, this will only be displayed when the item is
  /// not selected.
  ///
  /// To make the bottom navigation bar more accessible, consider choosing an
  /// icon with a stroked and filled version, such as [Icons.cloud] and
  /// [Icons.cloud_queue]. [icon] should be set to the stroked version and
  /// [activeIcon] to the filled version.
  ///
  /// If a particular icon doesn't have a stroked or filled version, then don't
  /// pair unrelated icons. Instead, make sure to use a
  /// [BottomNavigationBarType.shifting].
  final JsonWidgetData icon;

  /* AUTOGENERATED FROM [BottomNavigationBarItem.label]*/
  /// The text label for this [BottomNavigationBarItem].
  ///
  /// This will be used to create a [Text] widget to put in the bottom navigation bar.
  final String? label;

  /* AUTOGENERATED FROM [BottomNavigationBarItem.tooltip]*/
  /// The text to display in the [Tooltip] for this [BottomNavigationBarItem].
  ///
  /// A [Tooltip] will only appear on this item if [tooltip] is set to a non-empty string.
  ///
  /// Defaults to null, in which case the tooltip is not shown.
  final String? tooltip;
}

/* AUTOGENERATED FROM [BottomNavigationBarItem]*/
/// Creates an item that is used with [BottomNavigationBar.items].
///
/// The argument [icon] should not be null and the argument [label] should not be null when used in a Material Design's [BottomNavigationBar].
class BottomNavigationBarItemBuilderModel extends JsonWidgetBuilderModel {
  const BottomNavigationBarItemBuilderModel(
    super.args, {
    this.activeIcon,
    this.backgroundColor,
    required this.icon,
    this.label,
    this.tooltip,
  });

  /* AUTOGENERATED FROM [BottomNavigationBarItem.activeIcon]*/
  /// An alternative icon displayed when this bottom navigation item is
  /// selected.
  ///
  /// If this icon is not provided, the bottom navigation bar will display
  /// [icon] in either state.
  ///
  /// See also:
  ///
  ///  * [BottomNavigationBarItem.icon], for a description of how to pair icons.
  final JsonWidgetData? activeIcon;

  /* AUTOGENERATED FROM [BottomNavigationBarItem.backgroundColor]*/
  /// The color of the background radial animation for material [BottomNavigationBar].
  ///
  /// If the navigation bar's type is [BottomNavigationBarType.shifting], then
  /// the entire bar is flooded with the [backgroundColor] when this item is
  /// tapped. This will override [BottomNavigationBar.backgroundColor].
  ///
  /// Not used for [CupertinoTabBar]. Control the invariant bar color directly
  /// via [CupertinoTabBar.backgroundColor].
  ///
  /// See also:
  ///
  ///  * [Icon.color] and [ImageIcon.color] to control the foreground color of
  ///    the icons themselves.
  final Color? backgroundColor;

  /* AUTOGENERATED FROM [BottomNavigationBarItem.icon]*/
  /// The icon of the item.
  ///
  /// Typically the icon is an [Icon] or an [ImageIcon] widget. If another type
  /// of widget is provided then it should configure itself to match the current
  /// [IconTheme] size and color.
  ///
  /// If [activeIcon] is provided, this will only be displayed when the item is
  /// not selected.
  ///
  /// To make the bottom navigation bar more accessible, consider choosing an
  /// icon with a stroked and filled version, such as [Icons.cloud] and
  /// [Icons.cloud_queue]. [icon] should be set to the stroked version and
  /// [activeIcon] to the filled version.
  ///
  /// If a particular icon doesn't have a stroked or filled version, then don't
  /// pair unrelated icons. Instead, make sure to use a
  /// [BottomNavigationBarType.shifting].
  final JsonWidgetData icon;

  /* AUTOGENERATED FROM [BottomNavigationBarItem.label]*/
  /// The text label for this [BottomNavigationBarItem].
  ///
  /// This will be used to create a [Text] widget to put in the bottom navigation bar.
  final String? label;

  /* AUTOGENERATED FROM [BottomNavigationBarItem.tooltip]*/
  /// The text to display in the [Tooltip] for this [BottomNavigationBarItem].
  ///
  /// A [Tooltip] will only appear on this item if [tooltip] is set to a non-empty string.
  ///
  /// Defaults to null, in which case the tooltip is not shown.
  final String? tooltip;

  static BottomNavigationBarItemBuilderModel fromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    final result = maybeFromDynamic(
      map,
      args: args,
      registry: registry,
    );

    if (result == null) {
      throw Exception(
        '[BottomNavigationBarItemBuilder]: requested to parse from dynamic, but the input is null.',
      );
    }

    return result;
  }

  static BottomNavigationBarItemBuilderModel? maybeFromDynamic(
    dynamic map, {
    Map<String, dynamic> args = const {},
    JsonWidgetRegistry? registry,
  }) {
    BottomNavigationBarItemBuilderModel? result;

    if (map != null) {
      if (map is String) {
        map = yaon.parse(
          map,
          normalize: true,
        );
      }

      if (map is BottomNavigationBarItemBuilderModel) {
        result = map;
      } else {
        registry ??= JsonWidgetRegistry.instance;
        map = registry.processArgs(map, <String>{}).value;
        result = BottomNavigationBarItemBuilderModel(
          args,
          activeIcon: () {
            dynamic parsed = JsonWidgetData.maybeFromDynamic(
              map['activeIcon'],
              registry: registry,
            );

            return parsed;
          }(),
          backgroundColor: () {
            dynamic parsed = ThemeDecoder.decodeColor(
              map['backgroundColor'],
              validate: false,
            );

            return parsed;
          }(),
          icon: () {
            dynamic parsed = JsonWidgetData.fromDynamic(
              map['icon'],
              registry: registry,
            );

            if (parsed == null) {
              throw Exception(
                  'Null value encountered for required parameter: [icon].');
            }
            return parsed;
          }(),
          label: map['label'],
          tooltip: map['tooltip'],
        );
      }
    }

    return result;
  }

  @override
  Map<String, dynamic> toJson() {
    return JsonClass.removeNull({
      'activeIcon': activeIcon?.toJson(),
      'backgroundColor': ThemeEncoder.encodeColor(
        backgroundColor,
      ),
      'icon': icon.toJson(),
      'label': label,
      'tooltip': tooltip,
      ...args,
    });
  }
}

class BottomNavigationBarItemSchema {
  static const id =
      'https://peiffer-innovations.github.io/flutter_json_schemas/schemas/gen_build/bottom_navigation_bar_item.json';

  static final schema = <String, Object>{
    r'$schema': 'http://json-schema.org/draft-07/schema#',
    r'$id': id,
    'title': 'BottomNavigationBarItem',
    'type': 'object',
    'additionalProperties': false,
    'properties': {
      'activeIcon': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
      'backgroundColor': SchemaHelper.objectSchema(ColorSchema.id),
      'icon': SchemaHelper.objectSchema(JsonWidgetDataSchema.id),
      'label': SchemaHelper.stringSchema,
      'tooltip': SchemaHelper.stringSchema,
    },
  };
}
